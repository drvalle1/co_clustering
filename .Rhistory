#vectors to store results from iterations of gibbs sampler
vec.llk=rep(NA,ngibbs)
vec.theta=matrix(NA,ngibbs,ngroup.loc)
vec.phi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.psi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.z=matrix(NA,ngibbs,nloc)
vec.w=matrix(NA,ngibbs,nspp*nloc)
vec.gamma=matrix(NA,ngibbs,2); colnames(vec.gamma)=c('gamma.u','gamma.v')
#start gibbs sampler
options(warn=2)
lo=0.00000000001
hi=1-lo
for (i in 1:ngibbs){
print(c(i,table(z)))
#sample psi
psi=sample.psi(z=z,w=w,dat=dat,ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nmat=nmat,
a.prior=a.prior,b.prior=b.prior,lo=lo,hi=hi)
#sample theta, vk (in some cases, this will lead to changes in z and psi as well)
tmp=sample.theta(ngroup.loc=ngroup.loc,gamma.v=gamma.v,burnin=burnin,
gibbs.step=i,theta=theta,psi=psi,z=z,lo=lo,hi=hi,w=w,phi=phi)
theta=tmp$theta
vk=tmp$vk
z=tmp$z
psi=tmp$psi
w=tmp$w
phi=tmp$phi
#sample phi, uk (in some cases, this will lead to changes in w and psi as well)
tmp=sample.phi(ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc,gamma.u=gamma.u,burnin=burnin,
gibbs.step=i,phi=phi,psi=psi,w=w,lo=lo,hi=hi)
phi=tmp$phi
uk=tmp$uk
w=tmp$w
psi=tmp$psi
#pre-calculate useful quantities
lpsi=log(psi)
l1mpsi=log(1-psi)
#sample z
z=sample.z(ltheta=log(theta),dat=dat,nmat=nmat,lpsi=lpsi,l1mpsi=l1mpsi,
ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nloc=nloc,nspp=nspp,
w=w,z=z,a.prior=a.prior,b.prior=b.prior)
#sample w
w=sample.w(lphi=log(phi),dat=dat,nmat=nmat,lpsi=lpsi,l1mpsi=l1mpsi,
ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc,nloc=nloc,nspp=nspp,
w=w,z=z,a.prior=a.prior,b.prior=b.prior)
#sample gammas
gamma.u=sample.gamma.u(uk=uk,gamma.possib=gamma.possib,ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc)
gamma.v=sample.gamma.v(vk=vk,gamma.possib=gamma.possib,ngroup.loc=ngroup.loc)
#get log-likelihood
psi2=matrix(NA,nloc,nspp)
for (j in 1:nloc){
zind=z[j]
wind=w[zind,]
psi2[j,]=psi[zind,wind]
}
loglikel=dat*log(psi2)+(nmat-dat)*log(1-psi2)
#store Gibbs sampler results
vec.llk[i]=sum(loglikel)
vec.theta[i,]=theta
vec.phi[i,]=phi
vec.psi[i,]=psi
vec.z[i,]=z
vec.w[i,]=w
vec.gamma[i,]=c(gamma.u,gamma.v)
}
table(z)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\co_clustering')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('co_clustering_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
n=read.csv('fake data n.csv',as.is=T)$x
ngibbs=1000
burnin=ngibbs/2
ngroup.loc=20
ngroup.spp=10
gamma.v=0.1
gamma.u=0.1
a.prior=b.prior=0.1
ngibbs=49
nloc=nrow(dat)
nspp=ncol(dat)
nmat=matrix(n,nloc,nspp)
#get initial values for parameters
theta=rep(1/ngroup.loc,ngroup.loc)
phi=matrix(1/ngroup.spp,ngroup.loc,ngroup.spp)
z=sample(1:ngroup.loc,size=nloc,replace=T)
tmp=sample(1:ngroup.spp,size=nspp*ngroup.loc,replace=T)
w=matrix(tmp,ngroup.loc,nspp)
tmp=runif(ngroup.loc*ngroup.spp)
psi=matrix(tmp,ngroup.loc,ngroup.spp)
gamma.possib=seq(from=0.1,to=1,by=0.05) #discretization of possible gamma values
#vectors to store results from iterations of gibbs sampler
vec.llk=rep(NA,ngibbs)
vec.theta=matrix(NA,ngibbs,ngroup.loc)
vec.phi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.psi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.z=matrix(NA,ngibbs,nloc)
vec.w=matrix(NA,ngibbs,nspp*nloc)
vec.gamma=matrix(NA,ngibbs,2); colnames(vec.gamma)=c('gamma.u','gamma.v')
#start gibbs sampler
options(warn=2)
lo=0.00000000001
hi=1-lo
for (i in 1:ngibbs){
print(c(i,table(z)))
#sample psi
psi=sample.psi(z=z,w=w,dat=dat,ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nmat=nmat,
a.prior=a.prior,b.prior=b.prior,lo=lo,hi=hi)
#sample theta, vk (in some cases, this will lead to changes in z and psi as well)
tmp=sample.theta(ngroup.loc=ngroup.loc,gamma.v=gamma.v,burnin=burnin,
gibbs.step=i,theta=theta,psi=psi,z=z,lo=lo,hi=hi,w=w,phi=phi)
theta=tmp$theta
vk=tmp$vk
z=tmp$z
psi=tmp$psi
w=tmp$w
phi=tmp$phi
#sample phi, uk (in some cases, this will lead to changes in w and psi as well)
tmp=sample.phi(ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc,gamma.u=gamma.u,burnin=burnin,
gibbs.step=i,phi=phi,psi=psi,w=w,lo=lo,hi=hi)
phi=tmp$phi
uk=tmp$uk
w=tmp$w
psi=tmp$psi
#pre-calculate useful quantities
lpsi=log(psi)
l1mpsi=log(1-psi)
#sample z
z=sample.z(ltheta=log(theta),dat=dat,nmat=nmat,lpsi=lpsi,l1mpsi=l1mpsi,
ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nloc=nloc,nspp=nspp,
w=w,z=z,a.prior=a.prior,b.prior=b.prior)
#sample w
w=sample.w(lphi=log(phi),dat=dat,nmat=nmat,lpsi=lpsi,l1mpsi=l1mpsi,
ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc,nloc=nloc,nspp=nspp,
w=w,z=z,a.prior=a.prior,b.prior=b.prior)
#sample gammas
gamma.u=sample.gamma.u(uk=uk,gamma.possib=gamma.possib,ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc)
gamma.v=sample.gamma.v(vk=vk,gamma.possib=gamma.possib,ngroup.loc=ngroup.loc)
#get log-likelihood
psi2=matrix(NA,nloc,nspp)
for (j in 1:nloc){
zind=z[j]
wind=w[zind,]
psi2[j,]=psi[zind,wind]
}
loglikel=dat*log(psi2)+(nmat-dat)*log(1-psi2)
#store Gibbs sampler results
vec.llk[i]=sum(loglikel)
vec.theta[i,]=theta
vec.phi[i,]=phi
vec.psi[i,]=psi
vec.z[i,]=z
vec.w[i,]=w
vec.gamma[i,]=c(gamma.u,gamma.v)
}
i=50
tmp=sample.theta(ngroup.loc=ngroup.loc,gamma.v=gamma.v,burnin=burnin,
gibbs.step=i,theta=theta,psi=psi,z=z,lo=lo,hi=hi,w=w,phi=phi)
table(tmp$z)
theta=tmp$theta
vk=tmp$vk
z=tmp$z
psi=tmp$psi
w=tmp$w
phi=tmp$phi
table(z)
table(sample.z(ltheta=log(theta),dat=dat,nmat=nmat,lpsi=lpsi,l1mpsi=l1mpsi,
ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nloc=nloc,nspp=nspp,
w=w,z=z,a.prior=a.prior,b.prior=b.prior))
lprob.exist=matrix(NA,nloc,ngroup.loc)
for (i in 1:ngroup.loc){
lpsi1=matrix(lpsi[i,w[i,]],nloc,nspp,byrow=T)
l1mpsi1=matrix(l1mpsi[i,w[i,]],nloc,nspp,byrow=T)
lprob.exist[,i]=ltheta[i]+rowSums(dat*lpsi1+(nmat-dat)*l1mpsi1)
}
max.z=max(z)
ltheta=log(theta)
max.z=max(z)
max.z
i=1
max.z=max(z)
lprob=lprob.exist[i,1:max.z]
if (max.z<ngroup.loc) {
tmp=ltheta[max.z+1]+sum(lgamma(dat[i,]+a.prior)+lgamma(nmat[i,]-dat[i,]+b.prior)-
lgamma(a.prior+b.prior+nmat[i,]))
lprob=c(lprob,tmp)
}
lprob
max.z
lprob
i
lprob.exist
lprob.exist=matrix(NA,nloc,ngroup.loc)
i=1
lpsi1=matrix(lpsi[i,w[i,]],nloc,nspp,byrow=T)
l1mpsi1=matrix(l1mpsi[i,w[i,]],nloc,nspp,byrow=T)
lprob.exist[,i]=ltheta[i]+rowSums(dat*lpsi1+(nmat-dat)*l1mpsi1)
ltheta[i]+rowSums(dat*lpsi1+(nmat-dat)*l1mpsi1)
head(lprob.exist)
i=2
lpsi1=matrix(lpsi[i,w[i,]],nloc,nspp,byrow=T)
l1mpsi1=matrix(l1mpsi[i,w[i,]],nloc,nspp,byrow=T)
lpsi1
l1mpsi1
ltheta[i]+rowSums(dat*lpsi1+(nmat-dat)*l1mpsi1)
lprob.exist=matrix(NA,nloc,ngroup.loc)
for (i in 1:ngroup.loc){
lpsi1=matrix(lpsi[i,w[i,]],nloc,nspp,byrow=T)
l1mpsi1=matrix(l1mpsi[i,w[i,]],nloc,nspp,byrow=T)
lprob.exist[,i]=ltheta[i]+rowSums(dat*lpsi1+(nmat-dat)*l1mpsi1)
}
lprob.exist[1:5,1L5]
lprob.exist[1:5,1:5]
i=1
max.z=max(z)
lprob=lprob.exist[i,1:max.z]
if (max.z<ngroup.loc) {
tmp=ltheta[max.z+1]+sum(lgamma(dat[i,]+a.prior)+lgamma(nmat[i,]-dat[i,]+b.prior)-
lgamma(a.prior+b.prior+nmat[i,]))
lprob=c(lprob,tmp)
}
lprob
constant=nspp*(lgamma(a.prior+b.prior)-lgamma(a.prior)-lgamma(b.prior))
constant
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
setwd('U:\\GIT_models\\co_clustering')
sourceCpp('rcpp_func.cpp')
source('gibbs functions.R')
source('co_clustering_main.R')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
n=read.csv('fake data n.csv',as.is=T)$x
ngibbs=1000
burnin=ngibbs/2
ngroup.loc=20
ngroup.spp=10
gamma.v=0.1
gamma.u=0.1
a.prior=b.prior=0.1
nloc=nrow(dat)
nspp=ncol(dat)
nmat=matrix(n,nloc,nspp)
#get initial values for parameters
theta=rep(1/ngroup.loc,ngroup.loc)
phi=matrix(1/ngroup.spp,ngroup.loc,ngroup.spp)
z=sample(1:ngroup.loc,size=nloc,replace=T)
tmp=sample(1:ngroup.spp,size=nspp*ngroup.loc,replace=T)
w=matrix(tmp,ngroup.loc,nspp)
tmp=runif(ngroup.loc*ngroup.spp)
psi=matrix(tmp,ngroup.loc,ngroup.spp)
gamma.possib=seq(from=0.1,to=1,by=0.05) #discretization of possible gamma values
#vectors to store results from iterations of gibbs sampler
vec.llk=rep(NA,ngibbs)
vec.theta=matrix(NA,ngibbs,ngroup.loc)
vec.phi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.psi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.z=matrix(NA,ngibbs,nloc)
vec.w=matrix(NA,ngibbs,nspp*nloc)
vec.gamma=matrix(NA,ngibbs,2); colnames(vec.gamma)=c('gamma.u','gamma.v')
#start gibbs sampler
options(warn=2)
lo=0.00000000001
hi=1-lo
constant=nspp*(lgamma(a.prior+b.prior)-lgamma(a.prior)-lgamma(b.prior))
ltheta=log(theta)
lprob.exist=matrix(NA,nloc,ngroup.loc)
for (i in 1:ngroup.loc){
lpsi1=matrix(lpsi[i,w[i,]],nloc,nspp,byrow=T)
l1mpsi1=matrix(l1mpsi[i,w[i,]],nloc,nspp,byrow=T)
lprob.exist[,i]=ltheta[i]+rowSums(dat*lpsi1+(nmat-dat)*l1mpsi1)
}
lpsi=log(psi)
l1mpsi=log(1-psi)
lprob.exist=matrix(NA,nloc,ngroup.loc)
for (i in 1:ngroup.loc){
lpsi1=matrix(lpsi[i,w[i,]],nloc,nspp,byrow=T)
l1mpsi1=matrix(l1mpsi[i,w[i,]],nloc,nspp,byrow=T)
lprob.exist[,i]=ltheta[i]+rowSums(dat*lpsi1+(nmat-dat)*l1mpsi1)
}
i=1
sum(lgamma(dat[i,]+a.prior)+lgamma(nmat[i,]-dat[i,]+b.prior)-
lgamma(a.prior+b.prior+nmat[i,]))+constant
ngibbs
ngibbs=50
nloc=nrow(dat)
nspp=ncol(dat)
nmat=matrix(n,nloc,nspp)
#get initial values for parameters
theta=rep(1/ngroup.loc,ngroup.loc)
phi=matrix(1/ngroup.spp,ngroup.loc,ngroup.spp)
z=sample(1:ngroup.loc,size=nloc,replace=T)
tmp=sample(1:ngroup.spp,size=nspp*ngroup.loc,replace=T)
w=matrix(tmp,ngroup.loc,nspp)
tmp=runif(ngroup.loc*ngroup.spp)
psi=matrix(tmp,ngroup.loc,ngroup.spp)
gamma.possib=seq(from=0.1,to=1,by=0.05) #discretization of possible gamma values
#vectors to store results from iterations of gibbs sampler
vec.llk=rep(NA,ngibbs)
vec.theta=matrix(NA,ngibbs,ngroup.loc)
vec.phi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.psi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.z=matrix(NA,ngibbs,nloc)
vec.w=matrix(NA,ngibbs,nspp*nloc)
vec.gamma=matrix(NA,ngibbs,2); colnames(vec.gamma)=c('gamma.u','gamma.v')
#start gibbs sampler
options(warn=2)
lo=0.00000000001
hi=1-lo
constant=nspp*(lgamma(a.prior+b.prior)-lgamma(a.prior)-lgamma(b.prior))
for (i in 1:ngibbs){
print(c(i,table(z)))
#sample psi
psi=sample.psi(z=z,w=w,dat=dat,ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nmat=nmat,
a.prior=a.prior,b.prior=b.prior,lo=lo,hi=hi)
#sample theta, vk (in some cases, this will lead to changes in z and psi as well)
tmp=sample.theta(ngroup.loc=ngroup.loc,gamma.v=gamma.v,burnin=burnin,
gibbs.step=i,theta=theta,psi=psi,z=z,lo=lo,hi=hi,w=w,phi=phi)
theta=tmp$theta
vk=tmp$vk
z=tmp$z
psi=tmp$psi
w=tmp$w
phi=tmp$phi
#sample phi, uk (in some cases, this will lead to changes in w and psi as well)
tmp=sample.phi(ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc,gamma.u=gamma.u,burnin=burnin,
gibbs.step=i,phi=phi,psi=psi,w=w,lo=lo,hi=hi)
phi=tmp$phi
uk=tmp$uk
w=tmp$w
psi=tmp$psi
#pre-calculate useful quantities
lpsi=log(psi)
l1mpsi=log(1-psi)
#sample z
z=sample.z(ltheta=log(theta),dat=dat,nmat=nmat,lpsi=lpsi,l1mpsi=l1mpsi,
ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nloc=nloc,nspp=nspp,
w=w,z=z,a.prior=a.prior,b.prior=b.prior,constant=constant)
#sample w
w=sample.w(lphi=log(phi),dat=dat,nmat=nmat,lpsi=lpsi,l1mpsi=l1mpsi,
ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc,nloc=nloc,nspp=nspp,
w=w,z=z,a.prior=a.prior,b.prior=b.prior)
#sample gammas
gamma.u=sample.gamma.u(uk=uk,gamma.possib=gamma.possib,ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc)
gamma.v=sample.gamma.v(vk=vk,gamma.possib=gamma.possib,ngroup.loc=ngroup.loc)
#get log-likelihood
psi2=matrix(NA,nloc,nspp)
for (j in 1:nloc){
zind=z[j]
wind=w[zind,]
psi2[j,]=psi[zind,wind]
}
loglikel=dat*log(psi2)+(nmat-dat)*log(1-psi2)
#store Gibbs sampler results
vec.llk[i]=sum(loglikel)
vec.theta[i,]=theta
vec.phi[i,]=phi
vec.psi[i,]=psi
vec.z[i,]=z
vec.w[i,]=w
vec.gamma[i,]=c(gamma.u,gamma.v)
}
table(z)
ngibbs=49
nloc=nrow(dat)
nspp=ncol(dat)
nmat=matrix(n,nloc,nspp)
#get initial values for parameters
theta=rep(1/ngroup.loc,ngroup.loc)
phi=matrix(1/ngroup.spp,ngroup.loc,ngroup.spp)
z=sample(1:ngroup.loc,size=nloc,replace=T)
tmp=sample(1:ngroup.spp,size=nspp*ngroup.loc,replace=T)
w=matrix(tmp,ngroup.loc,nspp)
tmp=runif(ngroup.loc*ngroup.spp)
psi=matrix(tmp,ngroup.loc,ngroup.spp)
gamma.possib=seq(from=0.1,to=1,by=0.05) #discretization of possible gamma values
#vectors to store results from iterations of gibbs sampler
vec.llk=rep(NA,ngibbs)
vec.theta=matrix(NA,ngibbs,ngroup.loc)
vec.phi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.psi=matrix(NA,ngibbs,ngroup.spp*ngroup.loc)
vec.z=matrix(NA,ngibbs,nloc)
vec.w=matrix(NA,ngibbs,nspp*nloc)
vec.gamma=matrix(NA,ngibbs,2); colnames(vec.gamma)=c('gamma.u','gamma.v')
#start gibbs sampler
options(warn=2)
lo=0.00000000001
hi=1-lo
constant=nspp*(lgamma(a.prior+b.prior)-lgamma(a.prior)-lgamma(b.prior))
for (i in 1:ngibbs){
print(c(i,table(z)))
#sample psi
psi=sample.psi(z=z,w=w,dat=dat,ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nmat=nmat,
a.prior=a.prior,b.prior=b.prior,lo=lo,hi=hi)
#sample theta, vk (in some cases, this will lead to changes in z and psi as well)
tmp=sample.theta(ngroup.loc=ngroup.loc,gamma.v=gamma.v,burnin=burnin,
gibbs.step=i,theta=theta,psi=psi,z=z,lo=lo,hi=hi,w=w,phi=phi)
theta=tmp$theta
vk=tmp$vk
z=tmp$z
psi=tmp$psi
w=tmp$w
phi=tmp$phi
#sample phi, uk (in some cases, this will lead to changes in w and psi as well)
tmp=sample.phi(ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc,gamma.u=gamma.u,burnin=burnin,
gibbs.step=i,phi=phi,psi=psi,w=w,lo=lo,hi=hi)
phi=tmp$phi
uk=tmp$uk
w=tmp$w
psi=tmp$psi
#pre-calculate useful quantities
lpsi=log(psi)
l1mpsi=log(1-psi)
#sample z
z=sample.z(ltheta=log(theta),dat=dat,nmat=nmat,lpsi=lpsi,l1mpsi=l1mpsi,
ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nloc=nloc,nspp=nspp,
w=w,z=z,a.prior=a.prior,b.prior=b.prior,constant=constant)
#sample w
w=sample.w(lphi=log(phi),dat=dat,nmat=nmat,lpsi=lpsi,l1mpsi=l1mpsi,
ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc,nloc=nloc,nspp=nspp,
w=w,z=z,a.prior=a.prior,b.prior=b.prior)
#sample gammas
gamma.u=sample.gamma.u(uk=uk,gamma.possib=gamma.possib,ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc)
gamma.v=sample.gamma.v(vk=vk,gamma.possib=gamma.possib,ngroup.loc=ngroup.loc)
#get log-likelihood
psi2=matrix(NA,nloc,nspp)
for (j in 1:nloc){
zind=z[j]
wind=w[zind,]
psi2[j,]=psi[zind,wind]
}
loglikel=dat*log(psi2)+(nmat-dat)*log(1-psi2)
#store Gibbs sampler results
vec.llk[i]=sum(loglikel)
vec.theta[i,]=theta
vec.phi[i,]=phi
vec.psi[i,]=psi
vec.z[i,]=z
vec.w[i,]=w
vec.gamma[i,]=c(gamma.u,gamma.v)
}
i=50
psi=sample.psi(z=z,w=w,dat=dat,ngroup.loc=ngroup.loc,ngroup.spp=ngroup.spp,nmat=nmat,
a.prior=a.prior,b.prior=b.prior,lo=lo,hi=hi)
#sample theta, vk (in some cases, this will lead to changes in z and psi as well)
tmp=sample.theta(ngroup.loc=ngroup.loc,gamma.v=gamma.v,burnin=burnin,
gibbs.step=i,theta=theta,psi=psi,z=z,lo=lo,hi=hi,w=w,phi=phi)
theta=tmp$theta
vk=tmp$vk
z=tmp$z
psi=tmp$psi
w=tmp$w
phi=tmp$phi
#sample phi, uk (in some cases, this will lead to changes in w and psi as well)
tmp=sample.phi(ngroup.spp=ngroup.spp,ngroup.loc=ngroup.loc,gamma.u=gamma.u,burnin=burnin,
gibbs.step=i,phi=phi,psi=psi,w=w,lo=lo,hi=hi)
phi=tmp$phi
uk=tmp$uk
w=tmp$w
psi=tmp$psi
#pre-calculate useful quantities
lpsi=log(psi)
l1mpsi=log(1-psi)
table(z)
lprob.exist=matrix(NA,nloc,ngroup.loc)
for (i in 1:ngroup.loc){
lpsi1=matrix(lpsi[i,w[i,]],nloc,nspp,byrow=T)
l1mpsi1=matrix(l1mpsi[i,w[i,]],nloc,nspp,byrow=T)
lprob.exist[,i]=ltheta[i]+rowSums(dat*lpsi1+(nmat-dat)*l1mpsi1)
}
i=1
max.z=max(z)
lprob=lprob.exist[i,1:max.z]
if (max.z<ngroup.loc) {
tmp=ltheta[max.z+1]+sum(lgamma(dat[i,]+a.prior)+lgamma(nmat[i,]-dat[i,]+b.prior)-
lgamma(a.prior+b.prior+nmat[i,]))+constant
lprob=c(lprob,tmp)
}
lprob
tmp1=lprob-max(lprob) #for numerical stability
tmp2=exp(tmp1) #exponentiate log probability
prob=tmp2/sum(tmp2) #normalize to sum to 1
tmp2
table(z)
lprob.exist=matrix(NA,nloc,ngroup.loc)
for (i in 1:ngroup.loc){
lpsi1=matrix(lpsi[i,w[i,]],nloc,nspp,byrow=T)
l1mpsi1=matrix(l1mpsi[i,w[i,]],nloc,nspp,byrow=T)
lprob.exist[,i]=ltheta[i]+rowSums(dat*lpsi1+(nmat-dat)*l1mpsi1)
}
#sample z
for (i in 1:nloc){
max.z=max(z)
lprob=lprob.exist[i,1:max.z]
if (max.z<ngroup.loc) {
tmp=ltheta[max.z+1]+sum(lgamma(dat[i,]+a.prior)+lgamma(nmat[i,]-dat[i,]+b.prior)-
lgamma(a.prior+b.prior+nmat[i,]))+constant
lprob=c(lprob,tmp)
}
#get normalized probs
tmp1=lprob-max(lprob) #for numerical stability
tmp2=exp(tmp1) #exponentiate log probability
prob=tmp2/sum(tmp2) #normalize to sum to 1
#draw from multinomial distrib
ind=rmultinom(1,size=1,prob=prob)
ind1=which(ind==1)
z[i]=ind1
}
table(z)
